package com.mattworzala.canary.codegen.genspec;


import com.google.auto.service.AutoService;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import java.io.IOException;
import java.util.Set;

import static com.mattworzala.canary.codegen.PackageConstants.*;

@AutoService(Processor.class)
@SupportedSourceVersion(SourceVersion.RELEASE_17)
@SupportedAnnotationTypes(PKG_ASSERTION_SPEC + ".GenSpec")
public class GenSpecAP extends AbstractProcessor {
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "Compiling Canary GenSpec...");

        // Ok to get the first one since `annotations` will never contain more than one of the same type.
        // Since we only request @GenSpec here, that will always be the first element. If there are none,
        // then we do nothing.
        var maybeAnnotation = annotations.stream().findFirst();
        if (maybeAnnotation.isEmpty()) return false;
        TypeElement annotation = maybeAnnotation.get();

        // Ok to get the first one since it only goes on classes.
        Element type = roundEnv.getElementsAnnotatedWith(annotation).stream().findFirst().get();
        //todo what happens to inner classes here?

        // Attempt to run our GenSpec processor on the class and write the output.
        try {
            TypeSpec.Builder typeSpec = type.accept(new GenSpecProcessor(processingEnv.getMessager()), null);
            if (typeSpec == null) { return true; } // Return immediately, we have already errored inside the processor.

            JavaFile file = JavaFile.builder(PKG_ASSERTION_IMPL, typeSpec.build())
                    .addFileComment("AUTOGENERATED SOURCE FILE")
                    .indent("    ")
                    .build();

            file.writeTo(processingEnv.getFiler());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return true;
    }
}
